#include <Adafruit_LiquidCrystal.h>

Adafruit_LiquidCrystal lcd(0); // Configura el LCD

const int signalPin = A0;       // Pin analógico para la señal
const int startButtonPin = 2;   // Pin del botón de inicio
const int stopButtonPin = 3;    // Pin del botón de finalización
unsigned long lastTime = 0;
int lastValue = 0;
int frequency = 0;
float amplitude = 0;
bool isRunning = false;         // Variable para controlar si el programa está en ejecución
bool startPressed = false;      // Estado del botón de inicio
bool stopPressed = false;       // Estado del botón de parada

void setup() {
  pinMode(startButtonPin, INPUT_PULLUP); // Configura el botón de inicio
  pinMode(stopButtonPin, INPUT_PULLUP);  // Configura el botón de finalización
  lcd.begin(16, 2);
  lcd.print("Presione inicio");
  Serial.begin(9600);
}

void loop() {
  // Leer el estado de los botones
  bool startButtonState = digitalRead(startButtonPin) == LOW; // Verifica si el botón de inicio está presionado
  bool stopButtonState = digitalRead(stopButtonPin) == LOW;   // Verifica si el botón de parada está presionado

  // Si el botón de inicio está presionado y no lo estaba antes, iniciar el programa
  if (startButtonState && !startPressed) {
    isRunning = true;
    lcd.clear();
     lcd.setCursor(0, 0);
      lcd.print("F: ");
      lcd.print(frequency);
      lcd.print(" Hz");
   
      lcd.setCursor(0, 1);
      lcd.print("A: ");
      lcd.print(amplitude);
      lcd.print(" V");
    delay(20); // Pequeño retraso para evitar rebotes
  }
  
  // Si el botón de parada está presionado y no lo estaba antes, detener el programa
  if (stopButtonState && !stopPressed) {
    isRunning = false;
    lcd.clear();
    lcd.print("Programa detenido");
    delay(20); // Pequeño retraso para evitar rebotes
  }

  // Actualizar el estado de los botones
  startPressed = startButtonState;
  stopPressed = stopButtonState;

  // Si el programa está en ejecución, realizar las mediciones
  if (isRunning) {
    int currentValue = analogRead(signalPin);
    
    if (currentValue > 512 && lastValue <= 512) {
      frequency++;
    }
    
    amplitude = (float)(currentValue * (5.0 / 1023.0)); // Convertir a voltios

    if (millis() - lastTime >= 1000) {
     lcd.setCursor(0, 0);
      lcd.print("F: ");
      lcd.print(frequency);
      lcd.print(" Hz");
   
      lcd.setCursor(0, 1);
      lcd.print("A: ");
      lcd.print(amplitude);
      lcd.print(" V");
      
      frequency = 0; // Reiniciar frecuencia
      lastTime = millis();
    }
    
    lastValue = currentValue;
  }
}
